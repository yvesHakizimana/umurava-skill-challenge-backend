tags:
  - name: challenges
    description: Operations related to skill challenges
  - name: auth
    description: Authentication-related operations

paths:

  /api/v1/auth/signup:
    post:
      tags:
        - auth
      summary: User Signup

      requestBody:
        description: User signup request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserDto'
      responses:
        201:
          description: User registered successfully
        400:
          description: Bad Request
        409:
          description: Conflict
        500:
          description: Internal Server Error

  /api/v1/auth/login:
    post:
      tags:
        - auth
      summary: User login
      requestBody:
        description: User authentication request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationUserDto'
      responses:
        200:
          description: User authenticated successfully
        400:
          description: Bad request
        500:
          description: Internal Server Error

  /api/v1/challenges:
    get:
      tags:
        - challenges
      summary: Get All Challenges
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination (default is 1)
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 6
          description: Number of challenges per page (default is 6)
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - open
              - ongoing
              - completed
            default: 1
          description: Filter challenges by status (default is "open")

      responses:
        200:
          description: List of Challenges
        500:
          description: Internal Server Error

    post:
      tags:
        - challenges
      summary: Create A challenge
      security:
        - BearerAuth: []
      requestBody:
        description: Create challenge request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChallengeDto'
      responses:
        201:
          description: Challenge created successfully
        400:
          description: Bad Request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        500:
          description: Internal Server Error

  /api/v1/challenges/{challengeId}/participants:
    get:
      tags:
        - challenges
      summary: Get participants of a challenge.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: challengeId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the challenge
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination (default is 1)
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 6
          description: Number of items per page (default is 6)
      responses:
        200:
          description: List of participants for the given challenge
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    fullName:
                      type: string
                      description: Full name of the participant
                    email:
                      type: string
                      format: email
                      description: Email of the participant
        400:
          description: Bad request
        403:
          description: Forbidden - Admin access required.
        404:
          description: challenge not found.
        500:
          description: Internal Server Error

  /api/v1/challenges/stats:
    get:
      tags:
        - challenges
      summary: Get the overall statistics of the  system.
      security:
        - BearerAuth: [ ]
      parameters:
        - name: filter
          in: query
          required: false
          schema:
            type: string
            enum:
              - this_week
              - last_30_days
            default: this_week
          description: Filter stats by the time range (defaults to "this_week")
      responses:
        200:
          description: Overall statistics of challenges
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalChallenges:
                    type: integer
                    description: Total number of all created challenges in the system.
                  completedChallenges:
                    type: integer
                    description: Total number of completed challenged in the system.
                  openChallenges:
                    type: integer
                    description: Total number of open challenges in the system are created but no active participation on it.
                  onGoingChallenges:
                    type: integer
                    description: Total number of ongoing challenges in the system to mean they are open but people are participating on them.
                  totalParticipants:
                    type: integer
                    description: Total number of active talents in the system.

        400:
          description: Bad request
        403:
          description: Forbidden- Admin Access required.
        500:
          description: Internal Server Error.

  /api/v1/challenges/{challengeId}:
    get:
      tags:
        - challenges
      security:
        - BearerAuth: [ ]
      summary: Get a challenge By ID
      parameters:
        - name: challengeId
          in: path
          description: ID of the challenge
          required: true
          type: string
      responses:
        200:
          description: Challenge details
        400:
          description: Bad request
        404:
          description: Challenge not found
        500:
          description: Internal Server Error


    put:
      tags:
        - challenges
      security:
        - BearerAuth: [ ]
      summary: Update a Challenge By ID
      parameters:
        - name: challengeId
          in: path
          description: ID of the challenge
          required: true
          type: string
      requestBody:
        description: Update challenge request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChallengeDto'
      responses:
        200:
          description: Challenge updated successfully
        400:
          description: Bad Request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        500:
          description: Internal Server Error

    delete:
      tags:
        - challenges
      security:
        - BearerAuth: [ ]
      summary: Delete a Challenge by ID
      parameters:
        - name: challengeId
          in: path
          description: ID of the challenge
          required: true
          type: string
      responses:
        200:
          description: Challenge deleted successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Challenge not found
        500:
          description: Internal Server Error

  /api/v1/challenges/{challengeId}/participate:
    patch:
      tags:
        - challenges
      summary: A talent to participate in a a given challenge.
      security:
        - BearerAuth: []
      parameters:
        - name: challengeId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the challenge.
      responses:
        200:
          description: Successfully joined the challenge.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully joined the challenge."
        400:
          description: Bad Request - Invalid challenge ID or user already participating.
        401:
          description: Unauthorized -  User must be authenticated.
        404:
          description: Challenge not found.
        500:
          description: Internal Server Error.

components:
  schemas:
    CreateChallengeDto:
      type: object
      required:
        - title
        - deadline
        - moneyPrize
        - contactEmail
        - projectBrief
        - projectDescription
        - projectRequirements
        - deliverables
        - seniorityLevel
        - category
        - skillsNeeded
      properties:
        title:
          type: string
          description: Title of the challenge
        deadline:
          type: string
          format: date
          description: Deadline of the challenge
        moneyPrize:
          type: string
          description: Prize for the challenge
        contactEmail:
          type: string
          format: email
          description: Contact Email for inquiries
        projectBrief:
          type: string
          description: Brief description of the project
        projectDescription:
          type: array
          items:
            type: string
            maxLength: 255
          description: List of project Descriptions
        projectRequirements:
          type: array
          items:
            type: string
            maxLength: 255
          description: List of project requirements
        deliverables:
          type: array
          items:
            type: string
            maxLength: 255
          description: List of deliverables for the challenge
        seniorityLevel:
          type: array
          minItems: 1
          maxItems: 3
          items:
            type: string
            enum:
              - JUNIOR
              - MID
              - SENIOR
          description: Seniority levels required (at least one, maximum three)
        category:
          type: string
          enum:
            - DESIGN
            - FRONTED
            - BACKEND
            - FULLSTACK
          description: Challenge category
        skillsNeeded:
          type: array
          minItems: 1
          items:
            type: string
          description: List of required skills.

    UpdateChallengeDto:
      type: object
      properties:
        title:
          type: string
          description: Title of the challenge
        deadline:
          type: string
          format: date
          description: Deadline of the challenge
        moneyPrize:
          type: string
          description: Prize for the challenge
        contactEmail:
          type: string
          format: email
          description: Contact Email for inquiries
        projectBrief:
          type: string
          description: Brief description of the project.
        projectDescription:
          type: array
          items:
            type: string
            maxLength: 255
          description: List of project descriptions
        projectRequirements:
          type: array
          items:
            type: string
            maxLength: 255
          description: List of project requirements
        deliverables:
          type: array
          items:
            type: string
            maxLength: 255
          description: List of deliverables for the challenge
        seniorityLevel:
          type: array
          minItems: 1
          maxItems: 3
          items:
            type: string
            enum:
              - JUNIOR
              - MID
              - SENIOR
          description: Seniority levels required (at least one, maximum three)
        category:
          type: string
          enum:
            - DESIGN
            - FRONTED
            - BACKEND
            - FULLSTACK
          description: Challenge category
        skillsNeeded:
          type: array
          minItems: 1
          items:
            type: string
          description: List of required skills.

    RegisterUserDto:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          minLength: 8
          description: Password with at least 8 characters

    AuthenticationUserDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Email of the user.
        password:
          type: string
          format: password
          minLength: 8
          description: User's password

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token is required for authentication

